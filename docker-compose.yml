version: "3.9"

networks:
  default:
    name: docker-compose-nas

services:
  # Homepage - Dashboard
  # https://github.com/gethomepage/homepage
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    ports:
      - "3000:3000"
    environment:
      - HOMEPAGE_VAR_TITLE=${HOMEPAGE_VAR_TITLE}
      - HOMEPAGE_VAR_SEARCH_PROVIDER=${HOMEPAGE_VAR_SEARCH_PROVIDER}
      - HOMEPAGE_VAR_HEADER_STYLE=${HOMEPAGE_VAR_HEADER_STYLE}
      - HOMEPAGE_VAR_WEATHER_CITY=${HOMEPAGE_VAR_WEATHER_CITY}
      - HOMEPAGE_VAR_WEATHER_LAT=${HOMEPAGE_VAR_WEATHER_LAT}
      - HOMEPAGE_VAR_WEATHER_LONG=${HOMEPAGE_VAR_WEATHER_LONG}
      - HOMEPAGE_VAR_WEATHER_TIME=${TIMEZONE}
      - HOMEPAGE_VAR_WEATHER_UNIT=${HOMEPAGE_VAR_WEATHER_UNIT}
    volumes:
      - ./homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DATA_ROOT}:/data
    restart: always
    command: [sh, -c, "cp -n /app/config/tpl/*.yaml /app/config && node server.js"]

  # Sonarr - TV Shows
  # https://github.com/Sonarr/Sonarr
  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    ports:
      - "8989:8989"
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./sonarr:/config
      - ${DATA_ROOT}:/data
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:8989/sonarr/ping" ]
      interval: 5s
      retries: 10
    labels:
      - homepage.group=Media
      - homepage.name=Sonarr
      - homepage.icon=sonarr.png
      - homepage.href=http://${HOMEPAGE_HREF}:8989
      - homepage.description=Series management
      - homepage.weight=0
      - homepage.widget.type=sonarr
      # When you run multiple services in a Docker Compose file, Docker creates a default network for these services to communicate with each other. 
      # Inside this network, containers can refer to each other by their service names as defined in the Docker Compose file. 
      # In this case, the sonarr service can be reached at http://sonarr:8989 from any other service within the same Docker network.
      - homepage.widget.url=http://sonarr:8989
      - homepage.widget.key=${SONARR_API_KEY}
  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    ports:
      - "7878:7878"
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./radarr:/config
      - ${DATA_ROOT}:/data
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:7878/radarr/ping" ]
      interval: 5s
      retries: 10
    labels:
      - homepage.group=Media
      - homepage.name=Radarr
      - homepage.icon=radarr.png
      - homepage.href=http://${HOMEPAGE_HREF}:7878
      - homepage.description=Movies management
      - homepage.weight=1
      - homepage.widget.type=radarr
      - homepage.widget.url=http://radarr:7878
      - homepage.widget.key=${RADARR_API_KEY}
  lidarr:
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    ports:
      - "8686:8686"
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./lidarr:/config
      - ${DATA_ROOT}:/data
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:8686/lidarr/ping" ]
      interval: 5s
      retries: 10
    labels:
      - homepage.group=Media
      - homepage.name=Lidarr
      - homepage.icon=lidarr.png
      - homepage.href=http://${HOMEPAGE_HREF}:8686
      - homepage.description=Music management
      - homepage.weight=2
      - homepage.widget.type=lidarr
      - homepage.widget.url=http://lidarr:8686
      - homepage.widget.key=${LIDARR_API_KEY}
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    ports:
      - "9696:9696"
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./prowlarr:/config
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:9696/prowlarr/ping" ]
      interval: 5s
      retries: 10
    labels:
      - homepage.group=Download
      - homepage.name=Prowlarr
      - homepage.icon=prowlarr.png
      - homepage.href=http://${HOMEPAGE_HREF}:9696
      - homepage.description=Indexer and tracker manager
      - homepage.weight=4
      - homepage.widget.type=prowlarr
      - homepage.widget.url=http://prowlarr:9696
      - homepage.widget.key=${PROWLARR_API_KEY}
  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    ports:
      - "8080:8080" # SABnzbd Web UI
    environment:
      - PUID=${USER_ID} # Replace with your user ID
      - PGID=${GROUP_ID} # Replace with your group ID
      - TZ=${TIMEZONE} # Replace with your timezone
    volumes:
      - ./sabnzbd/config:/config # Configuration files
      - ${DATA_ROOT}/usenet:/data/usenet:rw
    restart: always
    labels:
      - homepage.group=Download
      - homepage.name=SABnzbd
      - homepage.icon=sabnzbd.png
      - homepage.href=http://${HOMEPAGE_HREF}:8080
      - homepage.description=Usenet downloader
      - homepage.weight=6
  readarr:
    image: lscr.io/linuxserver/readarr:nightly
    container_name: readarr
    ports:
      - "8787:8787" # Readarr Web UI
    environment:
      - PUID=${USER_ID} # Replace with your user ID
      - PGID=${GROUP_ID} # Replace with your group ID
      - TZ=${TIMEZONE} # Replace with your timezone
    volumes:
      - ./readarr:/config
      - ${DATA_ROOT}:/data
    restart: always
    labels:
      - homepage.group=Media
      - homepage.name=Readarr
      - homepage.icon=readarr.png
      - homepage.href=http://${HOMEPAGE_HREF}:8787
      - homepage.description=Ebook and Audiobook management
      - homepage.weight=3
      - homepage.widget.type=readarr
      - homepage.widget.url=http://readarr:8787
      - homepage.widget.key=${READARR_API_KEY}

  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - LOG_LEVEL=debug
      - PORT=5055
    volumes:
      - ./overseerr/config:/config
    ports:
      - 5055:5055
    restart: unless-stopped
    labels:
      - homepage.group=Media
      - homepage.name=Overseerr
      - homepage.icon=overseerr.png
      - homepage.href=http://${HOMEPAGE_HREF}:5055
      - homepage.description=Media Discovery & Request Management
      - homepage.weight=3
      - homepage.widget.type=overseerr
      - homepage.widget.url=http://overseerr:5055
      - homepage.widget.key=${OVERSEERR_API_KEY}
  
  buildarr:
    image: callum027/buildarr:latest
    container_name: buildarr
    restart: always
    volumes:
      - ./buildarr:/config:ro
    environment:
      TZ: ${TIMEZONE}
    depends_on:
      - sonarr
      - radarr
      - prowlarr
  
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      # - JELLYFIN_PublishedServerUrl=192.168.0.5 #optional
    volumes:
      - ./jellyfin:/config
      - ${DATA_ROOT}:/data
      # - /path/to/movies:/data/movies
    ports:
      - 8096:8096
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:8096/jellyfin/health" ]
      interval: 5s
      retries: 10
    labels:
      - homepage.group=Media
      - homepage.name=Jellyfin
      - homepage.icon=jellyfin.png
      - homepage.description=Media Server
      - homepage.href=http://${HOMEPAGE_HREF}:8096
      - homepage.weight=5
      - homepage.widget.type=jellyfin
      - homepage.widget.url=http://jellyfin:8096
      - homepage.widget.key=${JELLYFIN_API_KEY}
  
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    ports:
      - 5056:5055
    environment:
      - LOG_LEVEL=debug
      - TZ=${TIMEZONE}
    volumes:
      - ./jellyseerr:/app/config
    restart: always
    healthcheck:
      test: ["CMD", "wget", "http://127.0.0.1:5055/api/v1/status", "-qO", "/dev/null"]
      interval: 5s
      retries: 10
    labels:
      - homepage.group=Media
      - homepage.name=JellySeerr
      - homepage.icon=jellyseerr.png
      - homepage.href=http://${HOMEPAGE_HREF}:5056
      - homepage.description=Content Recommendations and Request Management for Jellyfin
      - homepage.weight=2
      - homepage.widget.type=jellyseerr
      - homepage.widget.url=http://jellyseerr:5056
      - homepage.widget.key=${JELLYSEERR_API_KEY}

  
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    ports:
      - "32400:32400"
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - VERSION=docker
      # - PLEX_CLAIM=claim-sprerScPGnha1z4mKdr7 #optional
    volumes:
      - ./plex:/config
      - ./plex/transcode:/transcode # Replace with the path to your transcode directory
      - ${DATA_ROOT}/media:/data/media
    restart: unless-stopped
    labels:
      - homepage.group=Media
      - homepage.name=Plex
      - homepage.icon=plex.png
      - homepage.description=Media Server
      - homepage.href=http://${HOMEPAGE_HREF}:32400
      - homepage.weight=6

  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    container_name: tautulli
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./tautulli/config:/config
    ports:
      - 8181:8181
    restart: unless-stopped
    labels:
      - homepage.group=Media
      - homepage.name=Tautulli
      - homepage.icon=tautulli.png
      - homepage.widget.type=tautulli
      - homepage.widget.url=http://tautulli:8181
      - homepage.widget.key=${TAUTULLI_API_KEY}
      - homepage.description=Monitor your Plex Media Server
      - homepage.href=http://${HOMEPAGE_HREF}:8181
      - homepage.weight=6

  
  # Gluetun - VPN Client for Docker Containers and More
  # https://www.smarthomebeginner.com/gluetun-docker-guide/
  gluetun:
    image: qmcgaw/gluetun
    container_name: gluetun
    security_opt:
      - no-new-privileges:true
    ports:
      - "8081:8081" # qBittorrent
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    volumes:
      - ./gluetun:/gluetun
    environment:
      TZ: ${TIMEZONE}
      # Wireguard
      # VPN_SERVICE_PROVIDER: windscribe
      # VPN_TYPE: wireguard
      # WIREGUARD_PRIVATE_KEY: "aPClFdBFA6xINJF1cuCdVsoY4GDLCBlYmgm62sqiYWc="
      # WIREGUARD_ADDRESSES: "100.75.9.0/32"
      # SERVER_COUNTRIES: Netherlands
      # # OpenVPN
      VPN_SERVICE_PROVIDER: windscribe
      VPN_TYPE: openvpn
      OPENVPN_USER: ${OPENVPN_USER}
      OPENVPN_PASSWORD: ${OPENVPN_PASS}
      SERVER_REGIONS: Netherlands
      

  
  # qBittorrent - Torrent downloader
  # https://www.smarthomebeginner.com/gluetun-docker-guide/
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:4.6.0
    container_name: qbittorrent
    network_mode: "service:gluetun"
    security_opt:
      - no-new-privileges:true
    volumes:
      - ./qbittorrent:/config
      - ${DATA_ROOT}/torrents/downloads:/data/downloads # Ensure that the downloads folder is set to /data/downloads in qBittorrent
    environment:
      PUID: ${USER_ID}
      PGID: ${GROUP_ID}
      UMASK_SET: 002
      WEBUI_PORT: 8081
    healthcheck: # https://github.com/qdm12/gluetun/issues/641#issuecomment-933856220
      test: "curl -sf https://example.com  || exit 1"
      interval: 1m
      timeout: 10s
      retries: 1
    restart: unless-stopped
    labels:
      - homepage.group=Download
      - homepage.name=qbittorrent
      - homepage.icon=qbittorrent.png
      - homepage.href=http://${HOMEPAGE_HREF}:8081
      - homepage.description=Torrent downloader
      - homepage.widget.type=qbittorrent
      - homepage.widget.url=http://gluetun:8081
      - homepage.widget.username=${QBITTORRENT_USERNAME}
      - homepage.widget.password=${QBITTORRENT_PASSWORD}
    depends_on:
      - gluetun

  ##############################
  # Utilities
  ##############################

  # Dozzle - Docker logs viewer
  # https://github.com/amir20/dozzle
  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8888:8080
    restart: always
    labels:
      - homepage.group=Utilities
      - homepage.name=Dozzle
      - homepage.href=http://${HOMEPAGE_HREF}:8888
      - homepage.description=Docker logs viewer
      - homepage.weight=0

  # Portainer - WebUI for Containers
  # https://github.com/portainer/portainer
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock # Use Docker Socket Proxy and comment this line out, for improved security.
    ports: 
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy and comment this line out, for improved security.
      - ./portainer/data:/data # Change to local directory if you want to save/transfer config locally.
    environment:
      - TZ=${TIMEZONE}
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
    restart: always
    labels:
      - homepage.group=Utilities
      - homepage.name=Portainer
      - homepage.icon=portainer.png
      - homepage.href=http://${HOMEPAGE_HREF}:9000
      - homepage.description=WebUI for Containers
      - homepage.weight=0

  # Watchtower - Auto update containers
  # https://github.com/containrrr/watchtower
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: always
    environment:
      - WATCHTOWER_CLEANUP=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Autoheal - Auto restart unhealthy containers
  # https://github.com/willfarrell/docker-autoheal
  autoheal:
    image: willfarrell/autoheal:latest
    container_name: autoheal
    restart: always
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
